#include "dvb_t.h"
// This modules is an LPF filter used for filtering the shoulders and aliases
// on the ouput of the DVB-T iFFT
// It operates in place
//
#define FILTER_TAP_NUM 64

static FLOAT filter_taps[FILTER_TAP_NUM] = {
  -0.0000017060894794469347,
  0.000001950897520057694,
  0.000006911363047109797,
  -0.000019474687286471794,
  -0.0000024826209684994894,
  0.00006799609352958015,
  -0.00007427451891020653,
  -0.00010252511056773024,
  0.0003019960014800791,
  -0.00008589919647043928,
  -0.0005862269377323851,
  0.0007913632756892805,
  0.00038066894240379185,
  -0.0019256463763347444,
  0.001188815398397066,
  0.0023348545696264588,
  -0.004345879626112838,
  0.00013588234180176198,
  0.0071443151815885385,
  -0.006906832457590053,
  -0.0050846970270404974,
  0.015643512384757415,
  -0.006421193880338676,
  -0.018464326332774235,
  0.026975643624758027,
  0.003933407395618243,
  -0.046629875613532795,
  0.03816975933722215,
  0.043475178987153515,
  -0.12117187172342216,
  0.04521213671317571,
  0.5260451799227285,
  0.5260451799227285,
  0.04521213671317571,
  -0.12117187172342216,
  0.043475178987153515,
  0.03816975933722215,
  -0.046629875613532795,
  0.003933407395618243,
  0.026975643624758027,
  -0.018464326332774235,
  -0.006421193880338676,
  0.015643512384757415,
  -0.0050846970270404974,
  -0.006906832457590053,
  0.0071443151815885385,
  0.00013588234180176198,
  -0.004345879626112838,
  0.0023348545696264588,
  0.001188815398397066,
  -0.0019256463763347444,
  0.00038066894240379185,
  0.0007913632756892805,
  -0.0005862269377323851,
  -0.00008589919647043928,
  0.0003019960014800791,
  -0.00010252511056773024,
  -0.00007427451891020653,
  0.00006799609352958015,
  -0.0000024826209684994894,
  -0.000019474687286471794,
  0.000006911363047109797,
  0.000001950897520057694,
  -0.0000017060894794469347
};

fft_complex m_mem[FILTER_TAP_NUM];
int m_ip;
//
// This operates in place and overwrites the data passed to it
// It decimates by 2.
//
int dvbt_filter( fft_complex *in, int length, fft_complex *out )
{
    int op = 0;
    for( int i = 0; i < length; i++ )
    {
        out[i] = in[i];
    }
    return length;
    for( int i = 0; i < length; i++ )
    {
        m_mem[m_ip] = in[i];
        m_ip = (m_ip+1)%FILTER_TAP_NUM;

        out[op].re = out[op].im = 0;
        int k = m_ip;
        for( int n = 0; n < FILTER_TAP_NUM; n++ )
        {
            out[op].re += filter_taps[n]*m_mem[k].re;
            out[op].im += filter_taps[n]*m_mem[k].im;
            k = (k+1)%FILTER_TAP_NUM;
        }
        op++;
    }
    return op;
}
